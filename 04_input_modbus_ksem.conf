# Retrieve data from MODBUS slave devices
[[inputs.modbus]]
  ## Connection Configuration
  ##
  ## The plugin supports connections to PLCs via MODBUS/TCP or
  ## via serial line communication in binary (RTU) or readable (ASCII) encoding
  ##
  ## Device name
  name = "Kostal Smart Energy Meter"
  name_override = "ksem"

  ## Slave ID - addresses a MODBUS device on the bus
  ## Range: 0 - 255 [0 = broadcast; 248 - 255 = reserved]
  slave_id = 71

  ## Timeout for each request
  timeout = "1s"

  ## Maximum number of retries and the time to wait between retries
  ## when a slave-device is busy.
  # busy_retries = 0
  # busy_retries_wait = "100ms"

  # TCP - connect via Modbus/TCP
  controller = "tcp://<<device-ip>>:502"

  ## Serial (RS485; RS232)
  # controller = "file:///dev/ttyUSB0"
  # baud_rate = 9600
  # data_bits = 8
  # parity = "N"
  # stop_bits = 1
  # transmission_mode = "RTU"


  ## Measurements
  ##

  ## Digital Variables, Discrete Inputs and Coils
  ## measurement - the (optional) measurement name, defaults to "modbus"
  ## name        - the variable name
  ## address     - variable address

#   discrete_inputs = [
#     { name = "start",          address = [0]},
#     { name = "stop",           address = [1]},
#     { name = "reset",          address = [2]},
#     { name = "emergency_stop", address = [3]},
#   ]
#   coils = [
#     { name = "motor1_run",     address = [0]},
#     { name = "motor1_jog",     address = [1]},
#     { name = "motor1_stop",    address = [2]},
#   ]
#
#   ## Analog Variables, Input Registers and Holding Registers
#   ## measurement - the (optional) measurement name, defaults to "modbus"
#   ## name        - the variable name
#   ## byte_order  - the ordering of bytes
#   ##  |---AB, ABCD   - Big Endian
#   ##  |---BA, DCBA   - Little Endian
#   ##  |---BADC       - Mid-Big Endian
#   ##  |---CDAB       - Mid-Little Endian
#   ## data_type  - INT16, UINT16, INT32, UINT32, INT64, UINT64, FLOAT32-IEEE (the IEEE 754 binary representation)
#   ##              FLOAT32, FIXED, UFIXED (fixed-point representation on input)
#   ## scale      - the final numeric variable representation
#   ## address    - variable address
#
  holding_registers = [

    { name = "active_power_plus",       byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [0,1]},
    { name = "active_power_minus",      byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [2,3]},

    { name = "reactive_power_plus",     byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [4,5]},
    { name = "reactive_power_minus",    byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [6,7]},

    { name = "apparent_power_plus",     byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [16,17]},
    { name = "apparent_power_minus",    byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [18,19]},

    { name = "power_factor",            byte_order = "ABCD", data_type = "INT32",  scale=1.0, address = [24,25]},
    { name = "supply_frequency",        byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [26,27]},


    { name = "l1_active_power_plus",    byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [40,41]},
    { name = "l1_active_power_minus",   byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [42,43]},

    { name = "l1_reactive_power_plus",  byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [44,45]},
    { name = "l1_reactive_power_minus", byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [46,47]},

    { name = "l1_apparent_power_plus",  byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [56,57]},
    { name = "l1_apparent_power_minus", byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [58,59]},

    { name = "l1_current",              byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [60,61]},
    { name = "l1_voltage",              byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [62,63]},
    { name = "l1_power_factor",         byte_order = "ABCD", data_type = "INT32",  scale=1.0, address = [64,65]},


    { name = "l2_active_power_plus",    byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [80,81]},
    { name = "l2_active_power_minus",   byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [82,83]},

    { name = "l2_reactive_power_plus",  byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [84,85]},
    { name = "l2_reactive_power_minus", byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [86,87]},

    { name = "l2_apparent_power_plus",  byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [96,97]},
    { name = "l2_apparent_power_minus", byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [98,99]},

    { name = "l2_current",              byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [100,101]},
    { name = "l2_voltage",              byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [102,103]},
    { name = "l2_power_factor",         byte_order = "ABCD", data_type = "INT32",  scale=1.0, address = [104,105]},


    { name = "l3_active_power_plus",    byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [120,121]},
    { name = "l3_active_power_minus",   byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [122,123]},

    { name = "l3_reactive_power_plus",  byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [124,125]},
    { name = "l3_reactive_power_minus", byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [126,127]},

    { name = "l3_apparent_power_plus",  byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [136,137]},
    { name = "l3_apparent_power_minus", byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [138,139]},

    { name = "l3_current",              byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [140,141]},
    { name = "l3_voltage",              byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [142,143]},
    { name = "l3_power_factor",         byte_order = "ABCD", data_type = "INT32",  scale=1.0, address = [144,145]},

    { name = "minimum_active_power",    byte_order = "ABCD", data_type = "UINT32", scale=1.0, address = [146,147]},
  ]
#   input_registers = [
#     { name = "tank_level",   byte_order = "AB",   data_type = "INT16",   scale=1.0,     address = [0]},
#     { name = "tank_ph",      byte_order = "AB",   data_type = "INT16",   scale=1.0,     address = [1]},
#     { name = "pump1_speed",  byte_order = "ABCD", data_type = "INT32",   scale=1.0,     address = [3,4]},
#   ]
